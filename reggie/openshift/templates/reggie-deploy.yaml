# Copyright 2020 The Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: |
      Deployment template for the Platform Serices
      RocketChat helper app reggie.
    iconClass: icon-node
  name: ${APPLICATION_NAME}
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: reggie-api-config
      labels:
        app: ${APPLICATION_NAME}
        component: api
    data:
      SSO_HOST_URL: ${SSO_HOST_URL}
      SSO_REALM: ${SSO_REALM}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_SENDER: ${EMAIL_SENDER}
      API_URL: ${HOST}
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: reggie-web-caddy-config
      labels:
        app: ${APPLICATION_NAME}
        component: web
    data:
      Caddyfile: |
        # Where caddy should listen
        :2015

        # Turn on the Web/file server
        file_server
        templates {
          mime  "text/javascript" "application/javascript"
        }

        # The site root
        root * /opt/app-root/

        # Because we should
        encode zstd gzip

        # This rewrite rule may be required to get React apps
        # to deal with trailing slashes properly.
        #@filter {
        #	not path_regexp ^\/0.0.0.0
        #	file {
        #		try_files {path} {path}/ /?url={uri}
        #	}
        #}
        #rewrite @try_files {http.matchers.file.relative}

        # This properly deals with react routes.
        try_files {path} {path}/ /index.html

        # On OCP we should log to stdout so Prometheus can
        # slurp up the logs for human consumption.
        log {
          #errors stdout
          output stdout 
          format single_field common_log
          level info
        }
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: reggie-web-config
      labels:
        app: ${APPLICATION_NAME}
        component: web
    data:
      REACT_APP_SSO_BASE_URL: ${REACT_APP_SSO_BASE_URL}
      REACT_APP_SSO_REALM_NAME: ${REACT_APP_SSO_REALM_NAME}
      REACT_APP_SSO_CLIENT_ID: ${REACT_APP_SSO_CLIENT_ID}
      REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL}
      REACT_APP_ROCKETCHAT_URL: ${REACT_APP_ROCKETCHAT_URL}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}-api
      annotations:
        description: Route for reggies API services
      labels:
        app: ${APPLICATION_NAME}
        component: api
    spec:
      host: "${HOSTNAME_HTTPS}"
      path: /api
      port:
        targetPort: 8000-tcp
      to:
        kind: Service 
        name: ${APPLICATION_NAME}-api
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
        certificate: |-
          ${TLS_CERT_PEM}
        key: |-
          ${TLS_KEY_PEM}
        caCertificate: |-
          ${TLS_CACERT_PEM}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}-web
      annotations:
        description: Route for reggies Web front end
      labels:
        app: ${APPLICATION_NAME}
        component: web
    spec:
      host: "${HOSTNAME_HTTPS}"
      port:
        targetPort: 2015-tcp
      to:
        kind: Service 
        name: ${APPLICATION_NAME}-web
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
        certificate: |-
          ${TLS_CERT_PEM}
        key: |-
          ${TLS_KEY_PEM}
        caCertificate: |-
          ${TLS_CACERT_PEM}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
        component: api
      name: ${APPLICATION_NAME}-api
    spec:
      selector:
        app: ${APPLICATION_NAME}
        component: api
      ports:
        - name: 8000-tcp
          port: 8000
          protocol: TCP
          targetPort: 8000
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
        component: web
      name: ${APPLICATION_NAME}-web
    spec:
      selector:
        app: ${APPLICATION_NAME}
        component: web
      ports:
        - name: 2015-tcp
          port: 2015
          protocol: TCP
          targetPort: 2015
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
        component: api
      name: ${APPLICATION_NAME}-api
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: "${APPLICATION_NAME}-api:${API_SOURCE_IMAGE_TAG}"
              namespace: ${SOURCE_IMAGE_NAMESPACE}
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        role: api
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            component: api
            role: api
          name: ${APPLICATION_NAME}
        spec:
          containers:
            - name: ${APPLICATION_NAME}
              image: " "
              startupProbe:
                httpGet:
                  path: /api/v1/ehlo
                  port: 8000
                failureThreshold: 11
                periodSeconds: 3
              readinessProbe:
                httpGet:
                  path: /api/v1/ehlo
                  port: 8000
                timeoutSeconds: 3
              ports:
                - containerPort: 8000
              envFrom: 
                - secretRef:
                    name: reggie-creds
                - configMapRef:
                    name: reggie-api-config
              resources:
                limits:
                  cpu: 50m
                  memory: 256Mi
                requests:
                  cpu: 20m
                  memory: 128Mi
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
        component: web
      name: ${APPLICATION_NAME}-web
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: "${APPLICATION_NAME}-web:${WEB_SOURCE_IMAGE_TAG}"
              namespace: ${SOURCE_IMAGE_NAMESPACE}
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        role: web
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            component: web
            role: web
          name: ${APPLICATION_NAME}
        spec:
          containers:
            - name: ${APPLICATION_NAME}
              image: " "
              startupProbe:
                httpGet:
                  path: /
                  port: 2015
                failureThreshold: 11
                periodSeconds: 3
              readinessProbe:
                httpGet:
                  path: /
                  port: 2015
                timeoutSeconds: 3
              ports:
                - containerPort: 2015
              envFrom: 
                - configMapRef:
                    name: reggie-web-config
              resources:
                limits:
                  cpu: 50m
                  memory: 128Mi
                requests:
                  cpu: 20m
                  memory: 64Mi
              volumeMounts:
                - name: config-vol
                  mountPath: /opt/app-root/etc/Caddyfile
                  subPath: Caddyfile
          volumes:
            - name: config-vol
              configMap:
                name: reggie-web-caddy-config
parameters:
  - description:
      The name assigned to all of the objects defined in this template.  You
      should keep this as default unless your know what your doing.
    displayName: APPLICATION_NAME
    name: APPLICATION_NAME
    required: true
    value: reggie
  - description:
      The namespace of the OpenShift project containing the
      imagestream for the application.
    displayName: Environment namespace
    name: NAMESPACE
    required: true
  - description: The openshift project where builds and target images are stored.
    displayName: Build Project
    name: SOURCE_IMAGE_NAMESPACE
    required: true
  # - name: API_SOURCE_IMAGE_NAME
  #   description: |
  #     The name of the source image for the API component
  #   displayName: API Source Image Name
  #   value: reggie-api
  - name: API_SOURCE_IMAGE_TAG
    description: |
      The name of the source image for the API component
    displayName: API Source Image Tag
  # - name: WEB_SOURCE_IMAGE_NAME
  #   description: |
  #     The name of the source image for the API component
  #   displayName: Web Source Image Name
  #   value: reggie-web
  - name: WEB_SOURCE_IMAGE_TAG
    description: |
      The name of the source image for the Web component
    displayName: Web Source Image Tag
  - name: SSO_REALM
    description:
    requred: true
  - name: EMAIL_HOST
    description:
    requred: true
  - name: EMAIL_PORT
    description:
    requred: true
  - name: EMAIL_SENDER
    description:
    requred: true
  - name: SSO_HOST_URL
    description:
    requred: true
  - name: TLS_CERT_PEM
    description: TLS certificate data in PEM format.
    displayName: TLS Certificate
    required: true
  - name: TLS_KEY_PEM
    description: |
      TLS certificate private key data in PEM format. This will be in
      the possesion of the person who created the Certificate Signing
      Request (CSR).
    displayName: TLS Private Key
    required: true
  - name: TLS_CACERT_PEM
    description: |
      TLS certificate cuthority certificate data in PEM format. If you 
      got your certificate from an iStore request, use L1KChain.txt.
    displayName: TLS Certificate Authority Certificate
    required: true
  - name: HOSTNAME_HTTPS
    description: Hostname serving the application
    displayName: Route Name
    required: true
  - name: REACT_APP_API_BASE_URL
    description:
    requred: true
  - name: REACT_APP_SSO_BASE_URL
    description:
    requred: true
  - name: REACT_APP_SSO_REALM_NAME
    description:
    requred: true
  - name: REACT_APP_ROCKETCHAT_URL
    description:
    requred: true
  - name: REACT_APP_SSO_CLIENT_ID
    description:
    requred: true
