# Copyright 2021 The Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
kind: Template
apiVersion: v1
metadata:
  name: ${APPLICATION_NAME}
  annotations:
    description: "Rocket.Chat Deployment"
    iconClass: "icon-nodejs"
    tags: "nodejs,mongodb,rocketchat"
objects:
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: 3000-tcp
        port: 3000
        protocol: TCP
        targetPort: 3000
      selector:
        app: ${APPLICATION_NAME}
      type: ClusterIP
      SessionAffinity: None
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: Route for application's http service.
      labels:
        app: ${APPLICATION_NAME}
    spec:
      host: "${HOSTNAME_HTTPS}"
      port:
        targetPort: 3000-tcp
      to:
        kind: Service 
        name: ${APPLICATION_NAME}
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
        certificate: |-
          ${TLS_CERT_PEM}
        key: |-
          ${TLS_KEY_PEM}
        caCertificate: |-
          ${TLS_CACERT_PEM}
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: rocketchat-uploads
    spec:
      storageClassName: ${SC_FILE_UPLOAD}
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: ${FILE_UPLOAD_STORAGE_SIZE}
      volumename: rocketchat-uploads
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        # - type: ImageChange
        #   imageChangeParams:
        #     automatic: true
        #     containerNames:
        #       - ${APPLICATION_NAME}
        #     from:
        #       kind: ImageStreamTag
        #       name: ${APPLICATION_NAME}:${SOURCE_IMAGE_TAG}
        #       namespace: ${SOURCE_IMAGE_NAMESPACE}
      replicas: ${{ROCKETCHAT_REPLICAS}}
      selector:
        app: "${APPLICATION_NAME}"
        role: server
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            role: server
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values: 
                    - ${APPLICATION_NAME}
                topologyKey: "kubernetes.io/hostname"
          volumes:
            - name: rocketchat-uploads
              persistentVolumeClaim:
                claimName: "rocketchat-uploads"
          containers:
            - name: ${APPLICATION_NAME}
              image: "image-registry.openshift-image-registry.svc:5000/${SOURCE_IMAGE_NAMESPACE}/${APPLICATION_NAME}:${SOURCE_IMAGE_TAG}"
              ports:
                - name: server-port
                  containerPort: 3000
                  protocol: TCP
              startupProbe:
                httpGet:
                  path: /api/info
                  port: server-port
                  scheme: HTTP
                failureThreshold: 54
                periodSeconds: 10
              livenessProbe:
                httpGet:
                  path: /api/info
                  port: server-port
                  scheme: HTTP
                failureThreshold: 3
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /api/info
                  port: server-port
                  scheme: HTTP
                failureThreshold: 3
                periodSeconds: 3
              resources:
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
                requests:
                  memory: "${MEMORY_REQUEST}"
                  cpu: "${CPU_REQUEST}"
              env:
                - name: MONGO_URL
                  valueFrom:
                    secretKeyRef:
                      key: mongo-url
                      name: "${MONGODB_SECRET_NAME}"
                - name: MONGO_OPLOG_URL
                  valueFrom:
                    secretKeyRef:
                      key: mongo-oplog-url
                      name: "${MONGODB_SECRET_NAME}"
                - name: ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: "${ROCKETCHAT_SECRET_NAME}"
                - name: ADMIN_PASS
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: "${ROCKETCHAT_SECRET_NAME}"
              envFrom: 
                - configMapRef:
                    name: rocketchat-config
              volumeMounts:
                - name: rocketchat-uploads
                  mountPath: /app/uploads
          terminationMessagePath: /dev/termination-log
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
  - apiVersion: autoscaling/v1
    kind: HorizontalPodAutoscaler
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      scaleTargetRef:
        apiVersion: apps/v1
        kind: DeploymentConfig 
        name: ${APPLICATION_NAME}
      minReplicas: ${{ROCKETCHAT_MIN_HPA}}
      maxReplicas: ${{ROCKETCHAT_MAX_HPA}}
      metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
parameters:
  - name: APPLICATION_NAME
    description: The name assigned to the application
    displayName: Application Name
    required: true
    value: rocketchat-server
  - name: SOURCE_IMAGE_NAMESPACE
    description: The namespace where the image is pulled from
    displayName: Source Image Namespace
    required: true
  - name: SOURCE_IMAGE_TAG
    description: Name of the RocketChat tag that should be used
    displayName: RocketChat Tag
    required: true
  - name: FILE_UPLOAD_STORAGE_SIZE
    description: The size of storage to allocate for file uploads to RocketChat
    displayName: File Upload Storage Size
    required: true
  - name: SC_FILE_UPLOAD
    description: The Storage Class for the RocketChat uploads volume
    displayName: File Uploads Storage Class 
    required: true
    value: netapp-file-standard
  - name: HOSTNAME_HTTPS
    description: Hostname serving the application
    displayName: Route Name
    required: true
  - name: ROCKETCHAT_REPLICAS
    description: Number of RocketChat replica pods
    displayName: RocketChat Replicas
    required: true
  - name: ROCKETCHAT_MIN_HPA
    description: Min Number of RocketChat pods for HPA
    displayName: RocketChat Min HPA
    required: true
  - name: ROCKETCHAT_MAX_HPA
    description: Max Number of RocketChat pods for HPA
    displayName: RocketChat Max HPA
    required: true
  - name: MEMORY_REQUEST
    description: Amount of Memory to Request.
    displayName: Memory Request
    required: true
  - name: MEMORY_LIMIT
    description: Amount of Memory to Limit.
    displayName: Memory Limit
    required: true
  - name: CPU_REQUEST
    description: Amount of CPU to Request.
    displayName: Memory Request
    required: true
  - name: CPU_LIMIT
    description: Amount of CPU to Limit.
    displayName: Memory Limit
    required: true
  - name: MONGODB_SECRET_NAME
    displayName: MongoDB Secret.
    description: Name of the Secret containing MongoDB Assets
    value: "mongodb-creds"
  - name: ROCKETCHAT_SECRET_NAME
    displayName: RocketChat Server Secret
    description: Name of the Secret containing RocketChat Assets
    value: "rocketchat-server-creds"
  - name: TLS_CERT_PEM
    description: TLS certificate data in PEM format.
    displayName: TLS Certificate
    required: true
  - name: TLS_KEY_PEM
    description: |
      TLS certificate private key data in PEM format. This will be in
      the possesion of the person who created the Certificate Signing
      Request (CSR).
    displayName: TLS Private Key
    required: true
  - name: TLS_CACERT_PEM
    description: |
      TLS certificate cuthority certificate data in PEM format. If you 
      got your certificate from an iStore request, use L1KChain.txt.
    displayName: TLS Certificate Authority Certificate
    required: true
    